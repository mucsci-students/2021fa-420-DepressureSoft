## Design Patterns

1. Singleton 
- ModelHistory acts such that only a single instance of it can ever exist, which is in historySingleton.
getInstance() acts as its constructor, and returns the private static singleton if it is not null. This provides history for the CLI.
- GUIHistory acts similarly so that only one guiHistorySingleton can exist. This holds GUI history.
- File: ModelHistory.java
- Line #: 10, 40-48
- File: GUIHistory.java
- Line #: 7, 19-27

2. Memento 
- Allows implementation of undo and redo functionality. Prior to a change being made to the CLI model
or the GUI, the current state of the model is snapshotted and pushed onto an undo stack for access.
- File: ModelHistory.java
- Line #: 55-59
- File: GUIHistory.java
- Line #: 29-33

3. Iterator
  - Implemented to create a diagram model from an existing diagram model
  - File: DiagramModel.java
  - Line #: 49-55
  
4. Composite
  - The GUI uses a composite design pattern, as the JFrame is composed of JMenus, JLabels, JComboBoxes, and JPanels, all of which can be treated as individual objects with 
    possible children.
  - File: GUI.java
  
5. Prototype
  - A copy constructor exists within UMLClass.java that allows a copy of an existing class to be made. This copy class is independent of its original.
  - File: UMLClass.java
  - Line #: 40-48
  
6. MVC 
  - MVC design pattern used to differentiate model, view, and controller functionality.

7. Builder 
  - The Method class is composed of a name and parameters.
  - The UML class is composed of the fields, methods, and parameters
  - Files: UMLClass.java, Method.java, Field.java, Parameter.java

8. Observer
  - The Jline LineReader observes commands typed in the CLI, then informs the tab completer for completion.
  - File: UMLInterface.java
  - Line #: 77, 106

9. Chain of Responsibility
  - The UMLInterface can provide a yes/no dialog, exit dialog and recieve an input. If a yes/no or exit dialog is used, the UMLInterface can 
    process the Y/N and exit. Otherwise, the chain of responsibility will be passed to the controller and tab completer to handle user inputs.
  - Files: UMLInterface.java, Controller.java, TabCompletion.java
