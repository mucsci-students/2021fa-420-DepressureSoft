/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.9.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'java'
    id 'jacoco'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()

    flatDir {
    	dirs 'lib'
    }
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'

    implementation 'com.google.code.gson:gson:2.8.8'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:29.0-jre'

    implementation 'com.googlecode.json-simple:json-simple:1.1.1'

    implementation group: 'org.jline', name: 'jline', version: '3.21.0'

    implementation group: 'org.fusesource.jansi', name: 'jansi', version: '2.4.0'

    implementation group: 'org.jline', name: 'jline-terminal-jansi', version: '3.21.0'
}

jar {
    manifest {
        attributes 'Main-Class': 'umleditor.startupGUI'
    }
}

shadowJar {
    archiveVersion = 'v2.0.0'
}

mainClassName = 'umleditor.startupGUI'

application {
    // Define the main class for the application.
    mainClass = 'umleditor.startupGUI'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}



jacoco {
    toolVersion = "0.8.7"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}
